/*
 * Aioz Stream API
 *
 * Aioz Stream Service
 *
 * API version: 1.0
 * Contact: support@swagger.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aiozstreamsdk

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type LiveStreamApiGetLiveStreamKeysRequest struct {
	search  *string
	sortBy  *string
	orderBy *string
	offset  *int32
	limit   *int32
}

func (r LiveStreamApiGetLiveStreamKeysRequest) Search(search string) LiveStreamApiGetLiveStreamKeysRequest {
	r.search = &search
	return r
}
func (r LiveStreamApiGetLiveStreamKeysRequest) SortBy(sortBy string) LiveStreamApiGetLiveStreamKeysRequest {
	r.sortBy = &sortBy
	return r
}
func (r LiveStreamApiGetLiveStreamKeysRequest) OrderBy(orderBy string) LiveStreamApiGetLiveStreamKeysRequest {
	r.orderBy = &orderBy
	return r
}
func (r LiveStreamApiGetLiveStreamKeysRequest) Offset(offset int32) LiveStreamApiGetLiveStreamKeysRequest {
	r.offset = &offset
	return r
}
func (r LiveStreamApiGetLiveStreamKeysRequest) Limit(limit int32) LiveStreamApiGetLiveStreamKeysRequest {
	r.limit = &limit
	return r
}

type LiveStreamServiceI interface {
	/*
	 * AddMulticast Add live stream multicast
	 * @param streamKey Live stream key. Use uuid
	 * @return LiveStreamApiAddMulticastRequest
	 */

	AddMulticast(streamKey string, data UpsertLiveStreamMulticastInput) (*GetLiveStreamMulticastResponse, error)

	/*
	 * AddMulticast Add live stream multicast
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param streamKey Live stream key. Use uuid
	 * @return LiveStreamApiAddMulticastRequest
	 */

	AddMulticastWithContext(ctx context.Context, streamKey string, data UpsertLiveStreamMulticastInput) (*GetLiveStreamMulticastResponse, error)

	/*
	 * CreateLiveStreamKey Create live stream key
	 * @return LiveStreamApiCreateLiveStreamKeyRequest
	 */

	CreateLiveStreamKey(input CreateLiveStreamKeyRequest) (*CreateLiveStreamKeyResponse, error)

	/*
	 * CreateLiveStreamKey Create live stream key
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return LiveStreamApiCreateLiveStreamKeyRequest
	 */

	CreateLiveStreamKeyWithContext(ctx context.Context, input CreateLiveStreamKeyRequest) (*CreateLiveStreamKeyResponse, error)

	/*
	 * CreateStreaming Create a new live stream media
	 * @param id Live stream key ID
	 * @return LiveStreamApiCreateStreamingRequest
	 */

	CreateStreaming(id string, input CreateStreamingRequest) (*CreateStreamingResponse, error)

	/*
	 * CreateStreaming Create a new live stream media
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream key ID
	 * @return LiveStreamApiCreateStreamingRequest
	 */

	CreateStreamingWithContext(ctx context.Context, id string, input CreateStreamingRequest) (*CreateStreamingResponse, error)

	/*
	 * DeleteLiveStreamKey Delete live stream key
	 * @param id Live stream key ID
	 * @return LiveStreamApiDeleteLiveStreamKeyRequest
	 */

	DeleteLiveStreamKey(id string) (*ResponseSuccess, error)

	/*
	 * DeleteLiveStreamKey Delete live stream key
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream key ID
	 * @return LiveStreamApiDeleteLiveStreamKeyRequest
	 */

	DeleteLiveStreamKeyWithContext(ctx context.Context, id string) (*ResponseSuccess, error)

	/*
	 * DeleteMulticast Delete live stream multicast
	 * @param streamKey Live stream key. UUID string format
	 * @return LiveStreamApiDeleteMulticastRequest
	 */

	DeleteMulticast(streamKey string) (*ResponseSuccess, error)

	/*
	 * DeleteMulticast Delete live stream multicast
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param streamKey Live stream key. UUID string format
	 * @return LiveStreamApiDeleteMulticastRequest
	 */

	DeleteMulticastWithContext(ctx context.Context, streamKey string) (*ResponseSuccess, error)

	/*
	 * DeleteStreaming Delete live stream video
	 * @param id Live stream key ID
	 * @param streamId Streaming ID
	 * @return LiveStreamApiDeleteStreamingRequest
	 */

	DeleteStreaming(id string, streamId string) (*ResponseSuccess, error)

	/*
	 * DeleteStreaming Delete live stream video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream key ID
	 * @param streamId Streaming ID
	 * @return LiveStreamApiDeleteStreamingRequest
	 */

	DeleteStreamingWithContext(ctx context.Context, id string, streamId string) (*ResponseSuccess, error)

	/*
	 * GetLiveStreamKey Get live stream key
	 * @param id ID
	 * @return LiveStreamApiGetLiveStreamKeyRequest
	 */

	GetLiveStreamKey(id string) (*GetLiveStreamKeyResponse, error)

	/*
	 * GetLiveStreamKey Get live stream key
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id ID
	 * @return LiveStreamApiGetLiveStreamKeyRequest
	 */

	GetLiveStreamKeyWithContext(ctx context.Context, id string) (*GetLiveStreamKeyResponse, error)

	/*
	 * GetLiveStreamKeys Get live stream key list
	 * @return LiveStreamApiGetLiveStreamKeysRequest
	 */

	GetLiveStreamKeys(r LiveStreamApiGetLiveStreamKeysRequest) (*GetLiveStreamKeysListResponse, error)

	/*
	 * GetLiveStreamKeys Get live stream key list
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return LiveStreamApiGetLiveStreamKeysRequest
	 */

	GetLiveStreamKeysWithContext(ctx context.Context, r LiveStreamApiGetLiveStreamKeysRequest) (*GetLiveStreamKeysListResponse, error)

	/*
	 * GetLiveStreamPlayerInfo Get live stream video public
	 * @param id Live stream key ID
	 * @return LiveStreamApiGetLiveStreamPlayerInfoRequest
	 */

	GetLiveStreamPlayerInfo(id string) (*GetLiveStreamVideoPublicResponse, error)

	/*
	 * GetLiveStreamPlayerInfo Get live stream video public
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream key ID
	 * @return LiveStreamApiGetLiveStreamPlayerInfoRequest
	 */

	GetLiveStreamPlayerInfoWithContext(ctx context.Context, id string) (*GetLiveStreamVideoPublicResponse, error)

	/*
	 * GetLiveStreamVideo Get live stream video
	 * @param id Live stream video ID
	 * @return LiveStreamApiGetLiveStreamVideoRequest
	 */

	GetLiveStreamVideo(id string) (*GetLiveStreamVideoResponse, error)

	/*
	 * GetLiveStreamVideo Get live stream video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream video ID
	 * @return LiveStreamApiGetLiveStreamVideoRequest
	 */

	GetLiveStreamVideoWithContext(ctx context.Context, id string) (*GetLiveStreamVideoResponse, error)

	/*
	 * GetMedias Get live stream media
	 * @param id Live stream key ID
	 * @return LiveStreamApiGetMediasRequest
	 */

	GetMedias(id string, data GetLiveStreamMediasRequest) (*GetLiveStreamMediasResponse, error)

	/*
	 * GetMedias Get live stream media
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream key ID
	 * @return LiveStreamApiGetMediasRequest
	 */

	GetMediasWithContext(ctx context.Context, id string, data GetLiveStreamMediasRequest) (*GetLiveStreamMediasResponse, error)

	/*
	 * GetMulticastByStreamKey Get live stream multicast by stream key
	 * @param streamKey Live stream key. UUID string format
	 * @return LiveStreamApiGetMulticastByStreamKeyRequest
	 */

	GetMulticastByStreamKey(streamKey string) (*GetLiveStreamMulticastResponse, error)

	/*
	 * GetMulticastByStreamKey Get live stream multicast by stream key
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param streamKey Live stream key. UUID string format
	 * @return LiveStreamApiGetMulticastByStreamKeyRequest
	 */

	GetMulticastByStreamKeyWithContext(ctx context.Context, streamKey string) (*GetLiveStreamMulticastResponse, error)

	/*
	 * GetStatisticByStreamMediaId Get live stream statistic by stream media id
	 * @param streamMediaId Live stream media ID
	 * @return LiveStreamApiGetStatisticByStreamMediaIdRequest
	 */

	GetStatisticByStreamMediaId(streamMediaId string) (*GetLiveStreamStatisticResponse, error)

	/*
	 * GetStatisticByStreamMediaId Get live stream statistic by stream media id
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param streamMediaId Live stream media ID
	 * @return LiveStreamApiGetStatisticByStreamMediaIdRequest
	 */

	GetStatisticByStreamMediaIdWithContext(ctx context.Context, streamMediaId string) (*GetLiveStreamStatisticResponse, error)

	/*
	 * GetStreaming Get live stream media streaming
	 * @param id Live stream key ID
	 * @param streamId Stream ID
	 * @return LiveStreamApiGetStreamingRequest
	 */

	GetStreaming(id string, streamId string) (*GetStreamingResponse, error)

	/*
	 * GetStreaming Get live stream media streaming
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream key ID
	 * @param streamId Stream ID
	 * @return LiveStreamApiGetStreamingRequest
	 */

	GetStreamingWithContext(ctx context.Context, id string, streamId string) (*GetStreamingResponse, error)

	/*
	 * GetStreamings Get live stream media streamings
	 * @param id Live stream key ID
	 * @return LiveStreamApiGetStreamingsRequest
	 */

	GetStreamings(id string) (*GetStreamingsResponse, error)

	/*
	 * GetStreamings Get live stream media streamings
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream key ID
	 * @return LiveStreamApiGetStreamingsRequest
	 */

	GetStreamingsWithContext(ctx context.Context, id string) (*GetStreamingsResponse, error)

	/*
	 * UpdateLiveStreamKey Update live stream key
	 * @param id Live stream key ID
	 * @return LiveStreamApiUpdateLiveStreamKeyRequest
	 */

	UpdateLiveStreamKey(id string, input UpdateLiveStreamKeyRequest) (*UpdateLiveStreamKeyResponse, error)

	/*
	 * UpdateLiveStreamKey Update live stream key
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream key ID
	 * @return LiveStreamApiUpdateLiveStreamKeyRequest
	 */

	UpdateLiveStreamKeyWithContext(ctx context.Context, id string, input UpdateLiveStreamKeyRequest) (*UpdateLiveStreamKeyResponse, error)

	/*
	 * UpdateMedia Update live stream media
	 * @param id Live stream key ID
	 * @return LiveStreamApiUpdateMediaRequest
	 */

	UpdateMedia(id string, data UpdateLiveStreamMediaRequest) (*ResponseSuccess, error)

	/*
	 * UpdateMedia Update live stream media
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Live stream key ID
	 * @return LiveStreamApiUpdateMediaRequest
	 */

	UpdateMediaWithContext(ctx context.Context, id string, data UpdateLiveStreamMediaRequest) (*ResponseSuccess, error)
}

// LiveStreamService communicating with the LiveStream
// endpoints of the AIOZ Stream API
type LiveStreamService struct {
	client *Client
}

/*
 * AddMulticast Add live stream multicast
 * Add live stream multicast

 * @param streamKey Live stream key. Use uuid
 * @return LiveStreamApiAddMulticastRequest
 */

func (s *LiveStreamService) AddMulticast(streamKey string, data UpsertLiveStreamMulticastInput) (*GetLiveStreamMulticastResponse, error) {

	return s.AddMulticastWithContext(context.Background(), streamKey, data)

}

/*
 * AddMulticast Add live stream multicast
 * Add live stream multicast
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param streamKey Live stream key. Use uuid
 * @return LiveStreamApiAddMulticastRequest
 */

func (s *LiveStreamService) AddMulticastWithContext(ctx context.Context, streamKey string, data UpsertLiveStreamMulticastInput) (*GetLiveStreamMulticastResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/multicast/{stream_key}"
	localVarPath = strings.Replace(localVarPath, "{"+"stream_key"+"}", url.PathEscape(parameterToString(streamKey, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = data

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetLiveStreamMulticastResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * CreateLiveStreamKey Create live stream key
 * Create live stream key

 * @return LiveStreamApiCreateLiveStreamKeyRequest
 */

func (s *LiveStreamService) CreateLiveStreamKey(input CreateLiveStreamKeyRequest) (*CreateLiveStreamKeyResponse, error) {

	return s.CreateLiveStreamKeyWithContext(context.Background(), input)

}

/*
 * CreateLiveStreamKey Create live stream key
 * Create live stream key
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return LiveStreamApiCreateLiveStreamKeyRequest
 */

func (s *LiveStreamService) CreateLiveStreamKeyWithContext(ctx context.Context, input CreateLiveStreamKeyRequest) (*CreateLiveStreamKeyResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = input

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(CreateLiveStreamKeyResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * CreateStreaming Create a new live stream media
 * Creates a new live stream media with the provided details

 * @param id Live stream key ID
 * @return LiveStreamApiCreateStreamingRequest
 */

func (s *LiveStreamService) CreateStreaming(id string, input CreateStreamingRequest) (*CreateStreamingResponse, error) {

	return s.CreateStreamingWithContext(context.Background(), id, input)

}

/*
 * CreateStreaming Create a new live stream media
 * Creates a new live stream media with the provided details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream key ID
 * @return LiveStreamApiCreateStreamingRequest
 */

func (s *LiveStreamService) CreateStreamingWithContext(ctx context.Context, id string, input CreateStreamingRequest) (*CreateStreamingResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}/streamings"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = input

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(CreateStreamingResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * DeleteLiveStreamKey Delete live stream key
 * Delete a live stream key by ID

 * @param id Live stream key ID
 * @return LiveStreamApiDeleteLiveStreamKeyRequest
 */

func (s *LiveStreamService) DeleteLiveStreamKey(id string) (*ResponseSuccess, error) {

	return s.DeleteLiveStreamKeyWithContext(context.Background(), id)

}

/*
 * DeleteLiveStreamKey Delete live stream key
 * Delete a live stream key by ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream key ID
 * @return LiveStreamApiDeleteLiveStreamKeyRequest
 */

func (s *LiveStreamService) DeleteLiveStreamKeyWithContext(ctx context.Context, id string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * DeleteMulticast Delete live stream multicast
 * Delete live stream multicast

 * @param streamKey Live stream key. UUID string format
 * @return LiveStreamApiDeleteMulticastRequest
 */

func (s *LiveStreamService) DeleteMulticast(streamKey string) (*ResponseSuccess, error) {

	return s.DeleteMulticastWithContext(context.Background(), streamKey)

}

/*
 * DeleteMulticast Delete live stream multicast
 * Delete live stream multicast
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param streamKey Live stream key. UUID string format
 * @return LiveStreamApiDeleteMulticastRequest
 */

func (s *LiveStreamService) DeleteMulticastWithContext(ctx context.Context, streamKey string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/multicast/{stream_key}"
	localVarPath = strings.Replace(localVarPath, "{"+"stream_key"+"}", url.PathEscape(parameterToString(streamKey, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * DeleteStreaming Delete live stream video
 * Delete live stream are created by a specific live stream key

 * @param id Live stream key ID
 * @param streamId Streaming ID
 * @return LiveStreamApiDeleteStreamingRequest
 */

func (s *LiveStreamService) DeleteStreaming(id string, streamId string) (*ResponseSuccess, error) {

	return s.DeleteStreamingWithContext(context.Background(), id, streamId)

}

/*
 * DeleteStreaming Delete live stream video
 * Delete live stream are created by a specific live stream key
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream key ID
 * @param streamId Streaming ID
 * @return LiveStreamApiDeleteStreamingRequest
 */

func (s *LiveStreamService) DeleteStreamingWithContext(ctx context.Context, id string, streamId string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}/streamings/{stream_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stream_id"+"}", url.PathEscape(parameterToString(streamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetLiveStreamKey Get live stream key
 * Get live stream key

 * @param id ID
 * @return LiveStreamApiGetLiveStreamKeyRequest
 */

func (s *LiveStreamService) GetLiveStreamKey(id string) (*GetLiveStreamKeyResponse, error) {

	return s.GetLiveStreamKeyWithContext(context.Background(), id)

}

/*
 * GetLiveStreamKey Get live stream key
 * Get live stream key
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id ID
 * @return LiveStreamApiGetLiveStreamKeyRequest
 */

func (s *LiveStreamService) GetLiveStreamKeyWithContext(ctx context.Context, id string) (*GetLiveStreamKeyResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetLiveStreamKeyResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetLiveStreamKeys Get live stream key list
 * Get live stream key list

 * @return LiveStreamApiGetLiveStreamKeysRequest
 */

func (s *LiveStreamService) GetLiveStreamKeys(r LiveStreamApiGetLiveStreamKeysRequest) (*GetLiveStreamKeysListResponse, error) {

	return s.GetLiveStreamKeysWithContext(context.Background(), r)

}

/*
 * GetLiveStreamKeys Get live stream key list
 * Get live stream key list
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return LiveStreamApiGetLiveStreamKeysRequest
 */

func (s *LiveStreamService) GetLiveStreamKeysWithContext(ctx context.Context, r LiveStreamApiGetLiveStreamKeysRequest) (*GetLiveStreamKeysListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sort_by", parameterToString(*r.sortBy, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetLiveStreamKeysListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetLiveStreamPlayerInfo Get live stream video public
 * Get live stream video public for a specific live stream key

 * @param id Live stream key ID
 * @return LiveStreamApiGetLiveStreamPlayerInfoRequest
 */

func (s *LiveStreamService) GetLiveStreamPlayerInfo(id string) (*GetLiveStreamVideoPublicResponse, error) {

	return s.GetLiveStreamPlayerInfoWithContext(context.Background(), id)

}

/*
 * GetLiveStreamPlayerInfo Get live stream video public
 * Get live stream video public for a specific live stream key
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream key ID
 * @return LiveStreamApiGetLiveStreamPlayerInfoRequest
 */

func (s *LiveStreamService) GetLiveStreamPlayerInfoWithContext(ctx context.Context, id string) (*GetLiveStreamVideoPublicResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/player/{id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetLiveStreamVideoPublicResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetLiveStreamVideo Get live stream video
 * Get a specific live stream video by ID

 * @param id Live stream video ID
 * @return LiveStreamApiGetLiveStreamVideoRequest
 */

func (s *LiveStreamService) GetLiveStreamVideo(id string) (*GetLiveStreamVideoResponse, error) {

	return s.GetLiveStreamVideoWithContext(context.Background(), id)

}

/*
 * GetLiveStreamVideo Get live stream video
 * Get a specific live stream video by ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream video ID
 * @return LiveStreamApiGetLiveStreamVideoRequest
 */

func (s *LiveStreamService) GetLiveStreamVideoWithContext(ctx context.Context, id string) (*GetLiveStreamVideoResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}/video"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetLiveStreamVideoResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetMedias Get live stream media
 * Get live stream media for a specific live stream key

 * @param id Live stream key ID
 * @return LiveStreamApiGetMediasRequest
 */

func (s *LiveStreamService) GetMedias(id string, data GetLiveStreamMediasRequest) (*GetLiveStreamMediasResponse, error) {

	return s.GetMediasWithContext(context.Background(), id, data)

}

/*
 * GetMedias Get live stream media
 * Get live stream media for a specific live stream key
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream key ID
 * @return LiveStreamApiGetMediasRequest
 */

func (s *LiveStreamService) GetMediasWithContext(ctx context.Context, id string, data GetLiveStreamMediasRequest) (*GetLiveStreamMediasResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}/videos"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = data

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetLiveStreamMediasResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetMulticastByStreamKey Get live stream multicast by stream key
 * Get live stream multicast by stream key

 * @param streamKey Live stream key. UUID string format
 * @return LiveStreamApiGetMulticastByStreamKeyRequest
 */

func (s *LiveStreamService) GetMulticastByStreamKey(streamKey string) (*GetLiveStreamMulticastResponse, error) {

	return s.GetMulticastByStreamKeyWithContext(context.Background(), streamKey)

}

/*
 * GetMulticastByStreamKey Get live stream multicast by stream key
 * Get live stream multicast by stream key
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param streamKey Live stream key. UUID string format
 * @return LiveStreamApiGetMulticastByStreamKeyRequest
 */

func (s *LiveStreamService) GetMulticastByStreamKeyWithContext(ctx context.Context, streamKey string) (*GetLiveStreamMulticastResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/multicast/{stream_key}"
	localVarPath = strings.Replace(localVarPath, "{"+"stream_key"+"}", url.PathEscape(parameterToString(streamKey, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetLiveStreamMulticastResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetStatisticByStreamMediaId Get live stream statistic by stream media id
 * Get live stream statistic by stream media id

 * @param streamMediaId Live stream media ID
 * @return LiveStreamApiGetStatisticByStreamMediaIdRequest
 */

func (s *LiveStreamService) GetStatisticByStreamMediaId(streamMediaId string) (*GetLiveStreamStatisticResponse, error) {

	return s.GetStatisticByStreamMediaIdWithContext(context.Background(), streamMediaId)

}

/*
 * GetStatisticByStreamMediaId Get live stream statistic by stream media id
 * Get live stream statistic by stream media id
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param streamMediaId Live stream media ID
 * @return LiveStreamApiGetStatisticByStreamMediaIdRequest
 */

func (s *LiveStreamService) GetStatisticByStreamMediaIdWithContext(ctx context.Context, streamMediaId string) (*GetLiveStreamStatisticResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/statistic/{stream_media_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"stream_media_id"+"}", url.PathEscape(parameterToString(streamMediaId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetLiveStreamStatisticResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetStreaming Get live stream media streaming
 * Get live stream media streaming for a specific live stream key

 * @param id Live stream key ID
 * @param streamId Stream ID
 * @return LiveStreamApiGetStreamingRequest
 */

func (s *LiveStreamService) GetStreaming(id string, streamId string) (*GetStreamingResponse, error) {

	return s.GetStreamingWithContext(context.Background(), id, streamId)

}

/*
 * GetStreaming Get live stream media streaming
 * Get live stream media streaming for a specific live stream key
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream key ID
 * @param streamId Stream ID
 * @return LiveStreamApiGetStreamingRequest
 */

func (s *LiveStreamService) GetStreamingWithContext(ctx context.Context, id string, streamId string) (*GetStreamingResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}/streamings/{stream_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stream_id"+"}", url.PathEscape(parameterToString(streamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetStreamingResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetStreamings Get live stream media streamings
 * Get live stream media streamings for a specific live stream key

 * @param id Live stream key ID
 * @return LiveStreamApiGetStreamingsRequest
 */

func (s *LiveStreamService) GetStreamings(id string) (*GetStreamingsResponse, error) {

	return s.GetStreamingsWithContext(context.Background(), id)

}

/*
 * GetStreamings Get live stream media streamings
 * Get live stream media streamings for a specific live stream key
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream key ID
 * @return LiveStreamApiGetStreamingsRequest
 */

func (s *LiveStreamService) GetStreamingsWithContext(ctx context.Context, id string) (*GetStreamingsResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}/streamings"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetStreamingsResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UpdateLiveStreamKey Update live stream key
 * Update a live stream key by ID

 * @param id Live stream key ID
 * @return LiveStreamApiUpdateLiveStreamKeyRequest
 */

func (s *LiveStreamService) UpdateLiveStreamKey(id string, input UpdateLiveStreamKeyRequest) (*UpdateLiveStreamKeyResponse, error) {

	return s.UpdateLiveStreamKeyWithContext(context.Background(), id, input)

}

/*
 * UpdateLiveStreamKey Update live stream key
 * Update a live stream key by ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream key ID
 * @return LiveStreamApiUpdateLiveStreamKeyRequest
 */

func (s *LiveStreamService) UpdateLiveStreamKeyWithContext(ctx context.Context, id string, input UpdateLiveStreamKeyRequest) (*UpdateLiveStreamKeyResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = input

	req, err := s.client.prepareRequest(ctx, http.MethodPut, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(UpdateLiveStreamKeyResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UpdateMedia Update live stream media
 * Update live stream media. You can only update while live streaming.

 * @param id Live stream key ID
 * @return LiveStreamApiUpdateMediaRequest
 */

func (s *LiveStreamService) UpdateMedia(id string, data UpdateLiveStreamMediaRequest) (*ResponseSuccess, error) {

	return s.UpdateMediaWithContext(context.Background(), id, data)

}

/*
 * UpdateMedia Update live stream media
 * Update live stream media. You can only update while live streaming.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Live stream key ID
 * @return LiveStreamApiUpdateMediaRequest
 */

func (s *LiveStreamService) UpdateMediaWithContext(ctx context.Context, id string, data UpdateLiveStreamMediaRequest) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/live_streams/{id}/streamings"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = data

	req, err := s.client.prepareRequest(ctx, http.MethodPut, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
