/*
 * Aioz Stream API
 *
 * Aioz Stream Service
 *
 * API version: 1.0
 * Contact: support@swagger.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aiozstreamsdk
import (
	"context"
	"net/http"
    "net/url"
	"strings"
	"os"
	"io"
)
// Linger please
var (
	_ context.Context
)

type PlaylistApiGetPlaylistByIdRequest struct { 
    
    sortBy *string
    orderBy *string
}

func (r PlaylistApiGetPlaylistByIdRequest) SortBy(sortBy string) PlaylistApiGetPlaylistByIdRequest {
	r.sortBy = &sortBy
	return r
}
func (r PlaylistApiGetPlaylistByIdRequest) OrderBy(orderBy string) PlaylistApiGetPlaylistByIdRequest {
	r.orderBy = &orderBy
	return r
}



type PlaylistServiceI interface {
	/*
	 * AddVideoToPlaylist Add a video to a playlist
	 * @param id Playlist ID
	 * @return PlaylistApiAddVideoToPlaylistRequest
	 */
	
	AddVideoToPlaylist(id string, payload AddVideoToPlaylistRequest) (*ResponseSuccess, error)

	/*
	 * AddVideoToPlaylist Add a video to a playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiAddVideoToPlaylistRequest
	 */
    
    AddVideoToPlaylistWithContext(ctx context.Context, id string, payload AddVideoToPlaylistRequest) (*ResponseSuccess, error)


	/*
	 * CreatePlaylist Create a playlist
	 * @return PlaylistApiCreatePlaylistRequest
	 */
	
	CreatePlaylist(request CreatePlaylistRequest) (*CreatePlaylistResponse, error)

	/*
	 * CreatePlaylist Create a playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return PlaylistApiCreatePlaylistRequest
	 */
    
    CreatePlaylistWithContext(ctx context.Context, request CreatePlaylistRequest) (*CreatePlaylistResponse, error)


	/*
	 * DeletePlaylistById Delete a playlist by ID
	 * @param id Playlist ID
	 * @return PlaylistApiDeletePlaylistByIdRequest
	 */
	
	DeletePlaylistById(id string) (*ResponseSuccess, error)

	/*
	 * DeletePlaylistById Delete a playlist by ID
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiDeletePlaylistByIdRequest
	 */
    
    DeletePlaylistByIdWithContext(ctx context.Context, id string) (*ResponseSuccess, error)


	/*
	 * DeletePlaylistThumbnail Delete a playlist thumbnail
	 * @param id Playlist ID
	 * @return PlaylistApiDeletePlaylistThumbnailRequest
	 */
	
	DeletePlaylistThumbnail(id string) (*ResponseSuccess, error)

	/*
	 * DeletePlaylistThumbnail Delete a playlist thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiDeletePlaylistThumbnailRequest
	 */
    
    DeletePlaylistThumbnailWithContext(ctx context.Context, id string) (*ResponseSuccess, error)


	/*
	 * GetPlaylistById Get playlist by ID
	 * @param id Playlist ID
	 * @return PlaylistApiGetPlaylistByIdRequest
	 */
	
	GetPlaylistById(id string, r PlaylistApiGetPlaylistByIdRequest) (*GetPlaylistByIdResponse, error)
	

	/*
	 * GetPlaylistById Get playlist by ID
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiGetPlaylistByIdRequest
	 */
    
    GetPlaylistByIdWithContext(ctx context.Context, id string, r PlaylistApiGetPlaylistByIdRequest) (*GetPlaylistByIdResponse, error)
    


	/*
	 * GetPlaylistPublicInfo Get a playlist public
	 * @param id Playlist ID
	 * @return PlaylistApiGetPlaylistPublicInfoRequest
	 */
	
	GetPlaylistPublicInfo(id string) (*PublicPlaylistObject, error)

	/*
	 * GetPlaylistPublicInfo Get a playlist public
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiGetPlaylistPublicInfoRequest
	 */
    
    GetPlaylistPublicInfoWithContext(ctx context.Context, id string) (*PublicPlaylistObject, error)


	/*
	 * GetPlaylists Get user's playlists
	 * @return PlaylistApiGetPlaylistsRequest
	 */
	
	GetPlaylists(request GetPlaylistListRequest) (*GetPlaylistListResponse, error)

	/*
	 * GetPlaylists Get user's playlists
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return PlaylistApiGetPlaylistsRequest
	 */
    
    GetPlaylistsWithContext(ctx context.Context, request GetPlaylistListRequest) (*GetPlaylistListResponse, error)


	/*
	 * MoveVideoInPlaylist Move a video in a playlist
	 * @param id Playlist ID
	 * @return PlaylistApiMoveVideoInPlaylistRequest
	 */
	
	MoveVideoInPlaylist(id string, payload MoveVideoInPlaylistRequest) (*ResponseSuccess, error)

	/*
	 * MoveVideoInPlaylist Move a video in a playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiMoveVideoInPlaylistRequest
	 */
    
    MoveVideoInPlaylistWithContext(ctx context.Context, id string, payload MoveVideoInPlaylistRequest) (*ResponseSuccess, error)


	/*
	 * RemoveVideoFromPlaylist Remove a video from a playlist
	 * @param id Playlist ID
	 * @param itemId Playlist Item ID
	 * @return PlaylistApiRemoveVideoFromPlaylistRequest
	 */
	
	RemoveVideoFromPlaylist(id string, itemId string) (*ResponseSuccess, error)

	/*
	 * RemoveVideoFromPlaylist Remove a video from a playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @param itemId Playlist Item ID
	 * @return PlaylistApiRemoveVideoFromPlaylistRequest
	 */
    
    RemoveVideoFromPlaylistWithContext(ctx context.Context, id string, itemId string) (*ResponseSuccess, error)


	/*
	 * UpdatePlaylist Update a playlist
	 * @param id Playlist ID
	 * @return PlaylistApiUpdatePlaylistRequest
	 */
	UpdatePlaylist(id string, metadata *[]Metadata, name *string, tags *[]string, fileName string, fileReader io.Reader) (*ResponseSuccess, error) 
	/*
	 * UpdatePlaylist Update a playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiUpdatePlaylistRequest
	 */
    UpdatePlaylistWithContext(ctx context.Context, id string, metadata *[]Metadata, name *string, tags *[]string, fileName string, fileReader io.Reader) (*ResponseSuccess, error) 

	    
}

// PlaylistService communicating with the Playlist
// endpoints of the AIOZ Stream API
type PlaylistService struct {
    client *Client
}



/*
 * AddVideoToPlaylist Add a video to a playlist
 * Add a specific video to a playlist for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiAddVideoToPlaylistRequest
 */


func (s *PlaylistService) AddVideoToPlaylist(id string, payload AddVideoToPlaylistRequest) (*ResponseSuccess, error) {
	
	
	return s.AddVideoToPlaylistWithContext(context.Background(), id, payload)

}


/*
 * AddVideoToPlaylist Add a video to a playlist
 * Add a specific video to a playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiAddVideoToPlaylistRequest
 */


func (s *PlaylistService) AddVideoToPlaylistWithContext(ctx context.Context, id string, payload AddVideoToPlaylistRequest) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = payload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

    res := new(ResponseSuccess)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}



/*
 * CreatePlaylist Create a playlist
 * Create a playlist for the authenticated user

 * @return PlaylistApiCreatePlaylistRequest
 */


func (s *PlaylistService) CreatePlaylist(request CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	
	
	return s.CreatePlaylistWithContext(context.Background(), request)

}


/*
 * CreatePlaylist Create a playlist
 * Create a playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return PlaylistApiCreatePlaylistRequest
 */


func (s *PlaylistService) CreatePlaylistWithContext(ctx context.Context, request CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = request

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

    res := new(CreatePlaylistResponse)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}



/*
 * DeletePlaylistById Delete a playlist by ID
 * Delete a specific playlist by its ID for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiDeletePlaylistByIdRequest
 */


func (s *PlaylistService) DeletePlaylistById(id string) (*ResponseSuccess, error) {
	
	
	return s.DeletePlaylistByIdWithContext(context.Background(), id)

}


/*
 * DeletePlaylistById Delete a playlist by ID
 * Delete a specific playlist by its ID for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiDeletePlaylistByIdRequest
 */


func (s *PlaylistService) DeletePlaylistByIdWithContext(ctx context.Context, id string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}


	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

    res := new(ResponseSuccess)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}



/*
 * DeletePlaylistThumbnail Delete a playlist thumbnail
 * Delete the thumbnail of a specific playlist for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiDeletePlaylistThumbnailRequest
 */


func (s *PlaylistService) DeletePlaylistThumbnail(id string) (*ResponseSuccess, error) {
	
	
	return s.DeletePlaylistThumbnailWithContext(context.Background(), id)

}


/*
 * DeletePlaylistThumbnail Delete a playlist thumbnail
 * Delete the thumbnail of a specific playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiDeletePlaylistThumbnailRequest
 */


func (s *PlaylistService) DeletePlaylistThumbnailWithContext(ctx context.Context, id string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}


	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

    res := new(ResponseSuccess)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}



/*
 * GetPlaylistById Get playlist by ID
 * Retrieve a specific playlist by its ID for the current user.

 * @param id Playlist ID
 * @return PlaylistApiGetPlaylistByIdRequest
 */

func (s *PlaylistService) GetPlaylistById(id string, r PlaylistApiGetPlaylistByIdRequest) (*GetPlaylistByIdResponse, error) { 
	
	return s.GetPlaylistByIdWithContext(context.Background(), id, r)

}


/*
 * GetPlaylistById Get playlist by ID
 * Retrieve a specific playlist by its ID for the current user.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiGetPlaylistByIdRequest
 */

func (s *PlaylistService) GetPlaylistByIdWithContext(ctx context.Context, id string, r PlaylistApiGetPlaylistByIdRequest) (*GetPlaylistByIdResponse, error) { 
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.sortBy != nil {
		localVarQueryParams.Add("sort_by", parameterToString(*r.sortBy, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

    res := new(GetPlaylistByIdResponse)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}



/*
 * GetPlaylistPublicInfo Get a playlist public
 * Get a specific playlist public by its ID

 * @param id Playlist ID
 * @return PlaylistApiGetPlaylistPublicInfoRequest
 */


func (s *PlaylistService) GetPlaylistPublicInfo(id string) (*PublicPlaylistObject, error) {
	
	
	return s.GetPlaylistPublicInfoWithContext(context.Background(), id)

}


/*
 * GetPlaylistPublicInfo Get a playlist public
 * Get a specific playlist public by its ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiGetPlaylistPublicInfoRequest
 */


func (s *PlaylistService) GetPlaylistPublicInfoWithContext(ctx context.Context, id string) (*PublicPlaylistObject, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/player.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}


	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

    res := new(PublicPlaylistObject)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}



/*
 * GetPlaylists Get user's playlists
 * Retrieve a list of playlists for the authenticated user

 * @return PlaylistApiGetPlaylistsRequest
 */


func (s *PlaylistService) GetPlaylists(request GetPlaylistListRequest) (*GetPlaylistListResponse, error) {
	
	
	return s.GetPlaylistsWithContext(context.Background(), request)

}


/*
 * GetPlaylists Get user's playlists
 * Retrieve a list of playlists for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return PlaylistApiGetPlaylistsRequest
 */


func (s *PlaylistService) GetPlaylistsWithContext(ctx context.Context, request GetPlaylistListRequest) (*GetPlaylistListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = request

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

    res := new(GetPlaylistListResponse)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}



/*
 * MoveVideoInPlaylist Move a video in a playlist
 * Move a specific video in a playlist for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiMoveVideoInPlaylistRequest
 */


func (s *PlaylistService) MoveVideoInPlaylist(id string, payload MoveVideoInPlaylistRequest) (*ResponseSuccess, error) {
	
	
	return s.MoveVideoInPlaylistWithContext(context.Background(), id, payload)

}


/*
 * MoveVideoInPlaylist Move a video in a playlist
 * Move a specific video in a playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiMoveVideoInPlaylistRequest
 */


func (s *PlaylistService) MoveVideoInPlaylistWithContext(ctx context.Context, id string, payload MoveVideoInPlaylistRequest) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = payload

	req, err := s.client.prepareRequest(ctx, http.MethodPut, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

    res := new(ResponseSuccess)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}



/*
 * RemoveVideoFromPlaylist Remove a video from a playlist
 * Remove a specific video from a playlist for the authenticated user

 * @param id Playlist ID
 * @param itemId Playlist Item ID
 * @return PlaylistApiRemoveVideoFromPlaylistRequest
 */


func (s *PlaylistService) RemoveVideoFromPlaylist(id string, itemId string) (*ResponseSuccess, error) {
	
	
	return s.RemoveVideoFromPlaylistWithContext(context.Background(), id, itemId)

}


/*
 * RemoveVideoFromPlaylist Remove a video from a playlist
 * Remove a specific video from a playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @param itemId Playlist Item ID
 * @return PlaylistApiRemoveVideoFromPlaylistRequest
 */


func (s *PlaylistService) RemoveVideoFromPlaylistWithContext(ctx context.Context, id string, itemId string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/items/{item_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"item_id"+"}", url.PathEscape(parameterToString(itemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}


	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

    res := new(ResponseSuccess)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}

/*
 * UpdatePlaylist Update a playlist
 * Update a specific playlist for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiUpdatePlaylistRequest
 */
 
 func (s *PlaylistService) UpdatePlaylistFile(id string, file *os.File, metadata *[]Metadata, name *string, tags *[]string) (*ResponseSuccess, error) { 
	 return s.UpdatePlaylistFileWithContext(context.Background(), id, file, metadata, name, tags)
 }

/*
 * UpdatePlaylist Update a playlist
 * Update a specific playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiUpdatePlaylistRequest
 */

func (s *PlaylistService) UpdatePlaylistFileWithContext(ctx context.Context, id string, file *os.File, metadata *[]Metadata, name *string, tags *[]string) (*ResponseSuccess, error) { 
    return s.UpdatePlaylistWithContext(ctx, id, metadata, name, tags, file.Name(), io.Reader(file))
}


/*
 * UpdatePlaylist Update a playlist
 * Update a specific playlist for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiUpdatePlaylistRequest
 */
func (s *PlaylistService) UpdatePlaylist(id string, metadata *[]Metadata, name *string, tags *[]string, fileName string, fileReader io.Reader) (*ResponseSuccess, error) { 	return s.UpdatePlaylistWithContext(context.Background(), id, metadata, name, tags, fileName, fileReader)
}


/*
 * UpdatePlaylist Update a playlist
 * Update a specific playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiUpdatePlaylistRequest
 */
func (s *PlaylistService) UpdatePlaylistWithContext(ctx context.Context, id string, metadata *[]Metadata, name *string, tags *[]string, fileName string, fileReader io.Reader) (*ResponseSuccess, error) { 
	localVarPath := "/playlists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	if metadata != nil {
        localVarFormParams["metadata"] = parameterToString(*metadata, "csv")
	}
	if name != nil {
        localVarFormParams["name"] = parameterToString(*name, "")
	}
	if tags != nil {
        localVarFormParams["tags"] = parameterToString(*tags, "csv")
	}


    req, err := s.client.prepareUploadRequest(ctx, http.MethodPatch, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

    res := new(ResponseSuccess)
    _, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

    return res, nil

}
