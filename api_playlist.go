/*
 * W3STREAM API
 *
 * W3STREAM Service
 *
 * API version: 1.0
 * Contact: support@swagger.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package w3streamsdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type PlaylistApiGetPlaylistByIdRequest struct {
	sortBy  *string
	orderBy *string
}

func (r PlaylistApiGetPlaylistByIdRequest) SortBy(sortBy string) PlaylistApiGetPlaylistByIdRequest {
	r.sortBy = &sortBy
	return r
}
func (r PlaylistApiGetPlaylistByIdRequest) OrderBy(orderBy string) PlaylistApiGetPlaylistByIdRequest {
	r.orderBy = &orderBy
	return r
}

type PlaylistServiceI interface {
	/*
	 * DeleteThumbnail Delete a playlist thumbnail
	 * @param id Playlist ID
	 * @return PlaylistApiDeleteThumbnailRequest
	 */

	DeleteThumbnail(id string) (*ResponseSuccess, error)

	/*
	 * DeleteThumbnail Delete a playlist thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiDeleteThumbnailRequest
	 */

	DeleteThumbnailWithContext(ctx context.Context, id string) (*ResponseSuccess, error)

	/*
	 * AddItem Add a video to a playlist
	 * @param id Playlist ID
	 * @return PlaylistApiAddItemRequest
	 */

	AddItem(id string, request AddVideoToPlaylistRequest) (*ResponseSuccess, error)

	/*
	 * AddItem Add a video to a playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiAddItemRequest
	 */

	AddItemWithContext(ctx context.Context, id string, request AddVideoToPlaylistRequest) (*ResponseSuccess, error)

	/*
	 * CreatePlaylist Create a new playlist
	 * @return PlaylistApiCreatePlaylistRequest
	 */

	CreatePlaylist(payload CreatePlaylistRequest) (*CreatePlaylistResponse, error)

	/*
	 * CreatePlaylist Create a new playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return PlaylistApiCreatePlaylistRequest
	 */

	CreatePlaylistWithContext(ctx context.Context, payload CreatePlaylistRequest) (*CreatePlaylistResponse, error)

	/*
	 * DeleteItem Remove a video from a playlist
	 * @param id Playlist ID
	 * @param itemId Playlist Item ID
	 * @return PlaylistApiDeleteItemRequest
	 */

	DeleteItem(id string, itemId string) (*ResponseSuccess, error)

	/*
	 * DeleteItem Remove a video from a playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @param itemId Playlist Item ID
	 * @return PlaylistApiDeleteItemRequest
	 */

	DeleteItemWithContext(ctx context.Context, id string, itemId string) (*ResponseSuccess, error)

	/*
	 * DeletePlaylist Delete a playlist by ID
	 * @param id Playlist ID
	 * @return PlaylistApiDeletePlaylistRequest
	 */

	DeletePlaylist(id string) (*ResponseSuccess, error)

	/*
	 * DeletePlaylist Delete a playlist by ID
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiDeletePlaylistRequest
	 */

	DeletePlaylistWithContext(ctx context.Context, id string) (*ResponseSuccess, error)

	/*
	 * GetPlaylistById Get playlist by ID
	 * @param id Playlist ID
	 * @return PlaylistApiGetPlaylistByIdRequest
	 */

	GetPlaylistById(id string, r PlaylistApiGetPlaylistByIdRequest) (*GetPlaylistByIdResponse, error)

	/*
	 * GetPlaylistById Get playlist by ID
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiGetPlaylistByIdRequest
	 */

	GetPlaylistByIdWithContext(ctx context.Context, id string, r PlaylistApiGetPlaylistByIdRequest) (*GetPlaylistByIdResponse, error)

	/*
	 * GetPlaylistInfo Get a playlist public
	 * @param id Playlist ID
	 * @return PlaylistApiGetPlaylistInfoRequest
	 */

	GetPlaylistInfo(id string) (*PublicPlaylistObject, error)

	/*
	 * GetPlaylistInfo Get a playlist public
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiGetPlaylistInfoRequest
	 */

	GetPlaylistInfoWithContext(ctx context.Context, id string) (*PublicPlaylistObject, error)

	/*
	 * GetPlaylists Get user's playlists
	 * @return PlaylistApiGetPlaylistsRequest
	 */

	GetPlaylists(payload GetPlaylistListRequest) (*GetPlaylistListResponse, error)

	/*
	 * GetPlaylists Get user's playlists
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return PlaylistApiGetPlaylistsRequest
	 */

	GetPlaylistsWithContext(ctx context.Context, payload GetPlaylistListRequest) (*GetPlaylistListResponse, error)

	/*
	 * MoveItems Move a video within a playlist
	 * @param id Playlist ID
	 * @return PlaylistApiMoveItemsRequest
	 */

	MoveItems(id string, payload MoveVideoInPlaylistRequest) (*ResponseSuccess, error)

	/*
	 * MoveItems Move a video within a playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiMoveItemsRequest
	 */

	MoveItemsWithContext(ctx context.Context, id string, payload MoveVideoInPlaylistRequest) (*ResponseSuccess, error)

	/*
	 * UpdatePlaylist Update a playlist
	 * @param id Playlist ID
	 * @return PlaylistApiUpdatePlaylistRequest
	 */
	UpdatePlaylist(id string, name *string, tags *[]string, metadata *[]string, fileName string, fileReader io.Reader) (*ResponseSuccess, error)
	/*
	 * UpdatePlaylist Update a playlist
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Playlist ID
	 * @return PlaylistApiUpdatePlaylistRequest
	 */
	UpdatePlaylistWithContext(ctx context.Context, id string, name *string, tags *[]string, metadata *[]string, fileName string, fileReader io.Reader) (*ResponseSuccess, error)
}

// PlaylistService communicating with the Playlist
// endpoints of the w3stream API
type PlaylistService struct {
	client *Client
}

/*
 * DeleteThumbnail Delete a playlist thumbnail
 * Delete the thumbnail of a specific playlist for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiDeleteThumbnailRequest
 */

func (s *PlaylistService) DeleteThumbnail(id string) (*ResponseSuccess, error) {

	return s.DeleteThumbnailWithContext(context.Background(), id)

}

/*
 * DeleteThumbnail Delete a playlist thumbnail
 * Delete the thumbnail of a specific playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiDeleteThumbnailRequest
 */

func (s *PlaylistService) DeleteThumbnailWithContext(ctx context.Context, id string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * AddItem Add a video to a playlist
 * Add a specific video to a playlist for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiAddItemRequest
 */

func (s *PlaylistService) AddItem(id string, request AddVideoToPlaylistRequest) (*ResponseSuccess, error) {

	return s.AddItemWithContext(context.Background(), id, request)

}

/*
 * AddItem Add a video to a playlist
 * Add a specific video to a playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiAddItemRequest
 */

func (s *PlaylistService) AddItemWithContext(ctx context.Context, id string, request AddVideoToPlaylistRequest) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = request

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * CreatePlaylist Create a new playlist
 * Create a new playlist for the authenticated user

 * @return PlaylistApiCreatePlaylistRequest
 */

func (s *PlaylistService) CreatePlaylist(payload CreatePlaylistRequest) (*CreatePlaylistResponse, error) {

	return s.CreatePlaylistWithContext(context.Background(), payload)

}

/*
 * CreatePlaylist Create a new playlist
 * Create a new playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return PlaylistApiCreatePlaylistRequest
 */

func (s *PlaylistService) CreatePlaylistWithContext(ctx context.Context, payload CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = payload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(CreatePlaylistResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * DeleteItem Remove a video from a playlist
 * Remove a specific video from a playlist for the authenticated user

 * @param id Playlist ID
 * @param itemId Playlist Item ID
 * @return PlaylistApiDeleteItemRequest
 */

func (s *PlaylistService) DeleteItem(id string, itemId string) (*ResponseSuccess, error) {

	return s.DeleteItemWithContext(context.Background(), id, itemId)

}

/*
 * DeleteItem Remove a video from a playlist
 * Remove a specific video from a playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @param itemId Playlist Item ID
 * @return PlaylistApiDeleteItemRequest
 */

func (s *PlaylistService) DeleteItemWithContext(ctx context.Context, id string, itemId string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/items/{item_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"item_id"+"}", url.PathEscape(parameterToString(itemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * DeletePlaylist Delete a playlist by ID
 * Delete a specific playlist by its ID for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiDeletePlaylistRequest
 */

func (s *PlaylistService) DeletePlaylist(id string) (*ResponseSuccess, error) {

	return s.DeletePlaylistWithContext(context.Background(), id)

}

/*
 * DeletePlaylist Delete a playlist by ID
 * Delete a specific playlist by its ID for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiDeletePlaylistRequest
 */

func (s *PlaylistService) DeletePlaylistWithContext(ctx context.Context, id string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetPlaylistById Get playlist by ID
 * Retrieve a specific playlist by its ID for the current user.

 * @param id Playlist ID
 * @return PlaylistApiGetPlaylistByIdRequest
 */

func (s *PlaylistService) GetPlaylistById(id string, r PlaylistApiGetPlaylistByIdRequest) (*GetPlaylistByIdResponse, error) {

	return s.GetPlaylistByIdWithContext(context.Background(), id, r)

}

/*
 * GetPlaylistById Get playlist by ID
 * Retrieve a specific playlist by its ID for the current user.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiGetPlaylistByIdRequest
 */

func (s *PlaylistService) GetPlaylistByIdWithContext(ctx context.Context, id string, r PlaylistApiGetPlaylistByIdRequest) (*GetPlaylistByIdResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.sortBy != nil {
		localVarQueryParams.Add("sort_by", parameterToString(*r.sortBy, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetPlaylistByIdResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetPlaylistInfo Get a playlist public
 * Get a specific playlist public by its ID

 * @param id Playlist ID
 * @return PlaylistApiGetPlaylistInfoRequest
 */

func (s *PlaylistService) GetPlaylistInfo(id string) (*PublicPlaylistObject, error) {

	return s.GetPlaylistInfoWithContext(context.Background(), id)

}

/*
 * GetPlaylistInfo Get a playlist public
 * Get a specific playlist public by its ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiGetPlaylistInfoRequest
 */

func (s *PlaylistService) GetPlaylistInfoWithContext(ctx context.Context, id string) (*PublicPlaylistObject, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/player.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(PublicPlaylistObject)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetPlaylists Get user's playlists
 * Retrieve a list of playlists for the authenticated user

 * @return PlaylistApiGetPlaylistsRequest
 */

func (s *PlaylistService) GetPlaylists(payload GetPlaylistListRequest) (*GetPlaylistListResponse, error) {

	return s.GetPlaylistsWithContext(context.Background(), payload)

}

/*
 * GetPlaylists Get user's playlists
 * Retrieve a list of playlists for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return PlaylistApiGetPlaylistsRequest
 */

func (s *PlaylistService) GetPlaylistsWithContext(ctx context.Context, payload GetPlaylistListRequest) (*GetPlaylistListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = payload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetPlaylistListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * MoveItems Move a video within a playlist
 * Change the position of a video in a playlist for the authenticated user.

 * @param id Playlist ID
 * @return PlaylistApiMoveItemsRequest
 */

func (s *PlaylistService) MoveItems(id string, payload MoveVideoInPlaylistRequest) (*ResponseSuccess, error) {

	return s.MoveItemsWithContext(context.Background(), id, payload)

}

/*
 * MoveItems Move a video within a playlist
 * Change the position of a video in a playlist for the authenticated user.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiMoveItemsRequest
 */

func (s *PlaylistService) MoveItemsWithContext(ctx context.Context, id string, payload MoveVideoInPlaylistRequest) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/playlists/{id}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = payload

	req, err := s.client.prepareRequest(ctx, http.MethodPut, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UpdatePlaylist Update a playlist
 * Update details of a specific playlist for the authenticated user

 * @param id Playlist ID
 * @return PlaylistApiUpdatePlaylistRequest
 */

func (s *PlaylistService) UpdatePlaylistFile(id string, file *os.File, name *string, tags *[]string, metadata *[]string) (*ResponseSuccess, error) {
	return s.UpdatePlaylistFileWithContext(context.Background(), id, file, name, tags, metadata)
}

/*
 * UpdatePlaylist Update a playlist
 * Update details of a specific playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiUpdatePlaylistRequest
 */

func (s *PlaylistService) UpdatePlaylistFileWithContext(ctx context.Context, id string, file *os.File, name *string, tags *[]string, metadata *[]string) (*ResponseSuccess, error) {
	return s.UpdatePlaylistWithContext(ctx, id, name, tags, metadata, file.Name(), io.Reader(file))
}

/*
* UpdatePlaylist Update a playlist
* Update details of a specific playlist for the authenticated user

* @param id Playlist ID
* @return PlaylistApiUpdatePlaylistRequest
 */
func (s *PlaylistService) UpdatePlaylist(id string, name *string, tags *[]string, metadata *[]string, fileName string, fileReader io.Reader) (*ResponseSuccess, error) {
	return s.UpdatePlaylistWithContext(context.Background(), id, name, tags, metadata, fileName, fileReader)
}

/*
 * UpdatePlaylist Update a playlist
 * Update details of a specific playlist for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Playlist ID
 * @return PlaylistApiUpdatePlaylistRequest
 */
func (s *PlaylistService) UpdatePlaylistWithContext(ctx context.Context, id string, name *string, tags *[]string, metadata *[]string, fileName string, fileReader io.Reader) (*ResponseSuccess, error) {
	localVarPath := "/playlists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	if name != nil {
		localVarFormParams["name"] = parameterToString(*name, "")
	}
	if tags != nil {
		localVarFormParams["tags"] = parameterToString(*tags, "csv")
	}
	if metadata != nil {
		localVarFormParams["metadata"] = parameterToString(*metadata, "csv")
	}

	req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
