/*
 * W3STREAM API
 *
 * W3STREAM Service
 *
 * API version: 1.0
 * Contact: support@swagger.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package w3streamsdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// VideosService communicating with the Videos
// endpoints of the w3stream API
type IUploadStream interface {
	UploadPart(fileName string, fileReader io.Reader, fileSize int64) (*Video, error)
	UploadPartWithContext(ctx context.Context, fileName string, fileReader io.Reader, fileSize int64) (*Video, error)
}

type VideoApiGetCaptionsRequest struct {
	offset *int32
	limit  *int32
}

func (r VideoApiGetCaptionsRequest) Offset(offset int32) VideoApiGetCaptionsRequest {
	r.offset = &offset
	return r
}
func (r VideoApiGetCaptionsRequest) Limit(limit int32) VideoApiGetCaptionsRequest {
	r.limit = &limit
	return r
}

type VideoServiceI interface {
	/*
	 * Create Create video object
	 * @return VideoApiCreateRequest
	 */

	Create(request CreateVideoRequest) (*CreateVideoResponse, error)

	/*
	 * Create Create video object
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideoApiCreateRequest
	 */

	CreateWithContext(ctx context.Context, request CreateVideoRequest) (*CreateVideoResponse, error)

	/*
	 * Update update video info
	 * @param id video's id
	 * @return VideoApiUpdateRequest
	 */

	Update(id string, input UpdateVideoInfoRequest) (*ResponseSuccess, error)

	/*
	 * Update update video info
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id video's id
	 * @return VideoApiUpdateRequest
	 */

	UpdateWithContext(ctx context.Context, id string, input UpdateVideoInfoRequest) (*ResponseSuccess, error)

	/*
	 * Delete Delete video
	 * @param id Video ID
	 * @return VideoApiDeleteRequest
	 */

	Delete(id string) (*ResponseSuccess, error)

	/*
	 * Delete Delete video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Video ID
	 * @return VideoApiDeleteRequest
	 */

	DeleteWithContext(ctx context.Context, id string) (*ResponseSuccess, error)

	/*
	 * UploadThumbnail Upload video thumbnail
	 * @param id video's id
	 * @return VideoApiUploadThumbnailRequest
	 */
	UploadThumbnail(id string, fileName string, fileReader io.Reader) (*ResponseSuccess, error)
	/*
	 * UploadThumbnail Upload video thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id video's id
	 * @return VideoApiUploadThumbnailRequest
	 */
	UploadThumbnailWithContext(ctx context.Context, id string, fileName string, fileReader io.Reader) (*ResponseSuccess, error)

	/*
	 * CreateCaption Create a new video caption
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoApiCreateCaptionRequest
	 */
	CreateCaption(id string, lan string, fileName string, fileReader io.Reader) (*CreateVideoCaptionResponse, error)
	/*
	 * CreateCaption Create a new video caption
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoApiCreateCaptionRequest
	 */
	CreateCaptionWithContext(ctx context.Context, id string, lan string, fileName string, fileReader io.Reader) (*CreateVideoCaptionResponse, error)

	/*
	 * DeleteCaption Delete a video caption
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoApiDeleteCaptionRequest
	 */

	DeleteCaption(id string, lan string) (*ResponseSuccess, error)

	/*
	 * DeleteCaption Delete a video caption
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoApiDeleteCaptionRequest
	 */

	DeleteCaptionWithContext(ctx context.Context, id string, lan string) (*ResponseSuccess, error)

	/*
	 * GetCaptions Get video captions
	 * @param id Video ID
	 * @return VideoApiGetCaptionsRequest
	 */

	GetCaptions(id string, r VideoApiGetCaptionsRequest) (*GetVideoCaptionsResponse, error)

	/*
	 * GetCaptions Get video captions
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Video ID
	 * @return VideoApiGetCaptionsRequest
	 */

	GetCaptionsWithContext(ctx context.Context, id string, r VideoApiGetCaptionsRequest) (*GetVideoCaptionsResponse, error)

	/*
	 * GetCost get video transcoding cost
	 * @return VideoApiGetCostRequest
	 */

	GetCost(qualities string, duration float32) (*GetTranscodeCostResponse, error)

	/*
	 * GetCost get video transcoding cost
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideoApiGetCostRequest
	 */

	GetCostWithContext(ctx context.Context, qualities string, duration float32) (*GetTranscodeCostResponse, error)

	/*
	 * GetDetail get video detail
	 * @param id video's id
	 * @return VideoApiGetDetailRequest
	 */

	GetDetail(id string) (*GetVideoDetailResponse, error)

	/*
	 * GetDetail get video detail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id video's id
	 * @return VideoApiGetDetailRequest
	 */

	GetDetailWithContext(ctx context.Context, id string) (*GetVideoDetailResponse, error)

	/*
	 * GetVideoList Get user videos list
	 * @return VideoApiGetVideoListRequest
	 */

	GetVideoList(request GetVideoListRequest) (*GetVideoListResponse, error)

	/*
	 * GetVideoList Get user videos list
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideoApiGetVideoListRequest
	 */

	GetVideoListWithContext(ctx context.Context, request GetVideoListRequest) (*GetVideoListResponse, error)

	/*
	 * SetCaption Set default video caption
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoApiSetCaptionRequest
	 */

	SetCaption(id string, lan string, isDefault SetDefaultCaptionRequest) (*ResponseSuccess, error)

	/*
	 * SetCaption Set default video caption
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoApiSetCaptionRequest
	 */

	SetCaptionWithContext(ctx context.Context, id string, lan string, isDefault SetDefaultCaptionRequest) (*ResponseSuccess, error)

	/*
	 * UploadPart Upload part of video
	 * @param id video's id
	 * @return VideoApiUploadPartRequest
	 */
	UploadPart(id string, hash *string, index *string, fileName string, fileReader io.Reader, fileSize int64) (*ResponseSuccess, error)
	/*
	 * UploadPart Upload part of video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id video's id
	 * @return VideoApiUploadPartRequest
	 */
	UploadPartWithContext(ctx context.Context, id string, hash *string, index *string, fileName string, fileReader io.Reader, fileSize int64) (*ResponseSuccess, error)

	/*
	 * UploadVideoComplete Get upload video when complete
	 * @param id video's id
	 * @return VideoApiUploadVideoCompleteRequest
	 */

	UploadVideoComplete(id string) (*ResponseSuccess, error)

	/*
	 * UploadVideoComplete Get upload video when complete
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id video's id
	 * @return VideoApiUploadVideoCompleteRequest
	 */

	UploadVideoCompleteWithContext(ctx context.Context, id string) (*ResponseSuccess, error)
}

// VideoService communicating with the Video
// endpoints of the w3stream API
type VideoService struct {
	client *Client
}

/*
 * Create Create video object
 * Create a video object

 * @return VideoApiCreateRequest
 */

func (s *VideoService) Create(request CreateVideoRequest) (*CreateVideoResponse, error) {

	return s.CreateWithContext(context.Background(), request)

}

/*
 * Create Create video object
 * Create a video object
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return VideoApiCreateRequest
 */

func (s *VideoService) CreateWithContext(ctx context.Context, request CreateVideoRequest) (*CreateVideoResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = request

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(CreateVideoResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Update update video info

 * @param id video's id
 * @return VideoApiUpdateRequest
 */

func (s *VideoService) Update(id string, input UpdateVideoInfoRequest) (*ResponseSuccess, error) {

	return s.UpdateWithContext(context.Background(), id, input)

}

/*
 * Update update video info
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id video's id
 * @return VideoApiUpdateRequest
 */

func (s *VideoService) UpdateWithContext(ctx context.Context, id string, input UpdateVideoInfoRequest) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = input

	req, err := s.client.prepareRequest(ctx, http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Delete Delete video
 * Delete a video by video ID.

 * @param id Video ID
 * @return VideoApiDeleteRequest
 */

func (s *VideoService) Delete(id string) (*ResponseSuccess, error) {

	return s.DeleteWithContext(context.Background(), id)

}

/*
 * Delete Delete video
 * Delete a video by video ID.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @return VideoApiDeleteRequest
 */

func (s *VideoService) DeleteWithContext(ctx context.Context, id string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UploadThumbnail Upload video thumbnail

 * @param id video's id
 * @return VideoApiUploadThumbnailRequest
 */

func (s *VideoService) UploadThumbnailFile(id string, file *os.File) (*ResponseSuccess, error) {
	return s.UploadThumbnailFileWithContext(context.Background(), id, file)
}

/*
 * UploadThumbnail Upload video thumbnail
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id video's id
 * @return VideoApiUploadThumbnailRequest
 */

func (s *VideoService) UploadThumbnailFileWithContext(ctx context.Context, id string, file *os.File) (*ResponseSuccess, error) {
	return s.UploadThumbnailWithContext(ctx, id, file.Name(), io.Reader(file))
}

/*
* UploadThumbnail Upload video thumbnail

* @param id video's id
* @return VideoApiUploadThumbnailRequest
 */
func (s *VideoService) UploadThumbnail(id string, fileName string, fileReader io.Reader) (*ResponseSuccess, error) {
	return s.UploadThumbnailWithContext(context.Background(), id, fileName, fileReader)
}

/*
 * UploadThumbnail Upload video thumbnail
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id video's id
 * @return VideoApiUploadThumbnailRequest
 */
func (s *VideoService) UploadThumbnailWithContext(ctx context.Context, id string, fileName string, fileReader io.Reader) (*ResponseSuccess, error) {
	localVarPath := "/videos/{id}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * CreateCaption Create a new video caption
 * Uploads a VTT file and creates a new video caption for the specified video.

 * @param id Video ID
 * @param lan Language
 * @return VideoApiCreateCaptionRequest
 */

func (s *VideoService) CreateCaptionFile(id string, lan string, file *os.File) (*CreateVideoCaptionResponse, error) {
	return s.CreateCaptionFileWithContext(context.Background(), id, lan, file)
}

/*
 * CreateCaption Create a new video caption
 * Uploads a VTT file and creates a new video caption for the specified video.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @param lan Language
 * @return VideoApiCreateCaptionRequest
 */

func (s *VideoService) CreateCaptionFileWithContext(ctx context.Context, id string, lan string, file *os.File) (*CreateVideoCaptionResponse, error) {
	return s.CreateCaptionWithContext(ctx, id, lan, file.Name(), io.Reader(file))
}

/*
* CreateCaption Create a new video caption
* Uploads a VTT file and creates a new video caption for the specified video.

* @param id Video ID
* @param lan Language
* @return VideoApiCreateCaptionRequest
 */
func (s *VideoService) CreateCaption(id string, lan string, fileName string, fileReader io.Reader) (*CreateVideoCaptionResponse, error) {
	return s.CreateCaptionWithContext(context.Background(), id, lan, fileName, fileReader)
}

/*
 * CreateCaption Create a new video caption
 * Uploads a VTT file and creates a new video caption for the specified video.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @param lan Language
 * @return VideoApiCreateCaptionRequest
 */
func (s *VideoService) CreateCaptionWithContext(ctx context.Context, id string, lan string, fileName string, fileReader io.Reader) (*CreateVideoCaptionResponse, error) {
	localVarPath := "/videos/{id}/caption/{lan}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lan"+"}", url.PathEscape(parameterToString(lan, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(CreateVideoCaptionResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * DeleteCaption Delete a video caption
 * Delete a caption in a specific language by providing the video ID for the video you want to delete the caption from and the language the caption is in.

 * @param id Video ID
 * @param lan Language
 * @return VideoApiDeleteCaptionRequest
 */

func (s *VideoService) DeleteCaption(id string, lan string) (*ResponseSuccess, error) {

	return s.DeleteCaptionWithContext(context.Background(), id, lan)

}

/*
 * DeleteCaption Delete a video caption
 * Delete a caption in a specific language by providing the video ID for the video you want to delete the caption from and the language the caption is in.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @param lan Language
 * @return VideoApiDeleteCaptionRequest
 */

func (s *VideoService) DeleteCaptionWithContext(ctx context.Context, id string, lan string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{id}/caption/{lan}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lan"+"}", url.PathEscape(parameterToString(lan, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetCaptions Get video captions
 * Retrieves a list of video captions for the specified video.

 * @param id Video ID
 * @return VideoApiGetCaptionsRequest
 */

func (s *VideoService) GetCaptions(id string, r VideoApiGetCaptionsRequest) (*GetVideoCaptionsResponse, error) {

	return s.GetCaptionsWithContext(context.Background(), id, r)

}

/*
 * GetCaptions Get video captions
 * Retrieves a list of video captions for the specified video.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @return VideoApiGetCaptionsRequest
 */

func (s *VideoService) GetCaptionsWithContext(ctx context.Context, id string, r VideoApiGetCaptionsRequest) (*GetVideoCaptionsResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{id}/captions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetVideoCaptionsResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetCost get video transcoding cost
 * get video transcoding cost

 * @return VideoApiGetCostRequest
 */

func (s *VideoService) GetCost(qualities string, duration float32) (*GetTranscodeCostResponse, error) {

	return s.GetCostWithContext(context.Background(), qualities, duration)

}

/*
 * GetCost get video transcoding cost
 * get video transcoding cost
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return VideoApiGetCostRequest
 */

func (s *VideoService) GetCostWithContext(ctx context.Context, qualities string, duration float32) (*GetTranscodeCostResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/cost"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	localVarQueryParams.Add("qualities", parameterToString(qualities, ""))
	localVarQueryParams.Add("duration", parameterToString(duration, ""))

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetTranscodeCostResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetDetail get video detail
 * Retrieve the video details by video id.

 * @param id video's id
 * @return VideoApiGetDetailRequest
 */

func (s *VideoService) GetDetail(id string) (*GetVideoDetailResponse, error) {

	return s.GetDetailWithContext(context.Background(), id)

}

/*
 * GetDetail get video detail
 * Retrieve the video details by video id.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id video's id
 * @return VideoApiGetDetailRequest
 */

func (s *VideoService) GetDetailWithContext(ctx context.Context, id string) (*GetVideoDetailResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetVideoDetailResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetVideoList Get user videos list
 * Retrieve a list of videos for the authenticated user.

 * @return VideoApiGetVideoListRequest
 */

func (s *VideoService) GetVideoList(request GetVideoListRequest) (*GetVideoListResponse, error) {

	return s.GetVideoListWithContext(context.Background(), request)

}

/*
 * GetVideoList Get user videos list
 * Retrieve a list of videos for the authenticated user.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return VideoApiGetVideoListRequest
 */

func (s *VideoService) GetVideoListWithContext(ctx context.Context, request GetVideoListRequest) (*GetVideoListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = request

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetVideoListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * SetCaption Set default video caption
 * Sets the default caption for the specified video and language.

 * @param id Video ID
 * @param lan Language
 * @return VideoApiSetCaptionRequest
 */

func (s *VideoService) SetCaption(id string, lan string, isDefault SetDefaultCaptionRequest) (*ResponseSuccess, error) {

	return s.SetCaptionWithContext(context.Background(), id, lan, isDefault)

}

/*
 * SetCaption Set default video caption
 * Sets the default caption for the specified video and language.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @param lan Language
 * @return VideoApiSetCaptionRequest
 */

func (s *VideoService) SetCaptionWithContext(ctx context.Context, id string, lan string, isDefault SetDefaultCaptionRequest) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{id}/caption/{lan}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lan"+"}", url.PathEscape(parameterToString(lan, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = isDefault

	req, err := s.client.prepareRequest(ctx, http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UploadPart Upload part of video
 * Upload part of video

 * @param id video's id
 * @return VideoApiUploadPartRequest
 */

func (s *VideoService) UploadPartFile(id string, file *os.File, hash *string, index *string) (*ResponseSuccess, error) {
	return s.UploadPartFileWithContext(context.Background(), id, file, hash, index)
}

/*
 * UploadPart Upload part of video
 * Upload part of video
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id video's id
 * @return VideoApiUploadPartRequest
 */

func (s *VideoService) UploadPartFileWithContext(ctx context.Context, id string, file *os.File, hash *string, index *string) (*ResponseSuccess, error) {
	fileInfo, _ := file.Stat()
	fileSize := fileInfo.Size()

	return s.UploadPartWithContext(ctx, id, hash, index, file.Name(), io.Reader(file), fileSize)
}

// VideosService communicating with the Videos
// endpoints of the w3stream API
type UploadPartStream struct {
	client *Client
	id     string
	hash   *string
	index  *string
	part   int32
}

func (s *VideoService) CreateUploadPartStream(id string, hash *string, index *string) (IUploadStream, error) {
	return &UploadPartStream{client: s.client, id: id, hash: hash, index: index, part: 1}, nil
}

func (s *UploadPartStream) UploadAPart(ctx context.Context, fileName string, fileReader io.Reader, fileSize int64, isLast bool) (*Video, error) {
	localVarPath := "/videos/{id}/part"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(s.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	request, err := s.client.prepareProgressiveUploadRequest(context.Background(), localVarPath, fileName, fileReader, fileSize, localVarHeaderParams, localVarQueryParams, localVarFormParams, s.part, isLast)

	if err != nil {
		return nil, err
	}

	s.part = s.part + 1

	res := new(Video)

	_, err = s.client.do(request, res)
	if err != nil {
		return nil, err
	}

	return res, nil
}
func (s *UploadPartStream) UploadPartWithContext(ctx context.Context, fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	return s.UploadAPart(ctx, fileName, fileReader, fileSize, false)
}
func (s *UploadPartStream) UploadLastPartWithContext(ctx context.Context, fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	return s.UploadAPart(ctx, fileName, fileReader, fileSize, true)
}
func (s *UploadPartStream) UploadPart(fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	return s.UploadPartWithContext(context.Background(), fileName, fileReader, fileSize)
}
func (s *UploadPartStream) UploadPartFile(file *os.File) (*Video, error) {
	return s.UploadPartWithContextFile(context.Background(), file)
}
func (s *UploadPartStream) UploadPartWithContextFile(ctx context.Context, file *os.File) (*Video, error) {
	fileInfo, _ := file.Stat()
	fileSize := fileInfo.Size()

	return s.UploadPartWithContext(ctx, file.Name(), io.Reader(file), fileSize)
}
func (s *UploadPartStream) UploadLastPart(fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	return s.UploadLastPartWithContext(context.Background(), fileName, fileReader, fileSize)
}
func (s *UploadPartStream) UploadLastPartFile(file *os.File) (*Video, error) {
	return s.UploadLastPartWithContextFile(context.Background(), file)
}
func (s *UploadPartStream) UploadLastPartWithContextFile(ctx context.Context, file *os.File) (*Video, error) {
	fileInfo, _ := file.Stat()
	fileSize := fileInfo.Size()

	return s.UploadLastPartWithContext(ctx, file.Name(), io.Reader(file), fileSize)
}

/*
* UploadPart Upload part of video
* Upload part of video

* @param id video's id
* @return VideoApiUploadPartRequest
 */
func (s *VideoService) UploadPart(id string, hash *string, index *string, fileName string, fileReader io.Reader, fileSize int64) (*ResponseSuccess, error) {
	return s.UploadPartWithContext(context.Background(), id, hash, index, fileName, fileReader, fileSize)
}

/*
 * UploadPart Upload part of video
 * Upload part of video
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id video's id
 * @return VideoApiUploadPartRequest
 */
func (s *VideoService) UploadPartWithContext(ctx context.Context, id string, hash *string, index *string, fileName string, fileReader io.Reader, fileSize int64) (*ResponseSuccess, error) {
	localVarPath := "/videos/{id}/part"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	if hash != nil {
		localVarFormParams["hash"] = parameterToString(*hash, "")
	}
	if index != nil {
		localVarFormParams["index"] = parameterToString(*index, "")
	}

	requests, err := s.client.prepareRangeRequests(ctx, localVarPath, fileName, fileReader, fileSize, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	for _, req := range requests {
		_, err = s.client.do(req, res)

		if err != nil {
			return nil, err
		}
	}

	return res, nil

}

/*
 * UploadVideoComplete Get upload video when complete
 * Get upload video when complete.

 * @param id video's id
 * @return VideoApiUploadVideoCompleteRequest
 */

func (s *VideoService) UploadVideoComplete(id string) (*ResponseSuccess, error) {

	return s.UploadVideoCompleteWithContext(context.Background(), id)

}

/*
 * UploadVideoComplete Get upload video when complete
 * Get upload video when complete.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id video's id
 * @return VideoApiUploadVideoCompleteRequest
 */

func (s *VideoService) UploadVideoCompleteWithContext(ctx context.Context, id string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{id}/complete"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
