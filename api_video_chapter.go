/*
 * W3STREAM API
 *
 * W3STREAM Service
 *
 * API version: 1.0
 * Contact: support@swagger.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package w3streamsdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type VideoChapterApiGetRequest struct {
	offset *int32
	limit  *int32
}

func (r VideoChapterApiGetRequest) Offset(offset int32) VideoChapterApiGetRequest {
	r.offset = &offset
	return r
}
func (r VideoChapterApiGetRequest) Limit(limit int32) VideoChapterApiGetRequest {
	r.limit = &limit
	return r
}

type VideoChapterServiceI interface {
	/*
	 * Create Create a video chapter
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoChapterApiCreateRequest
	 */
	Create(id string, lan string, fileName string, fileReader io.Reader) (*CreateVideoChapterResponse, error)
	/*
	 * Create Create a video chapter
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoChapterApiCreateRequest
	 */
	CreateWithContext(ctx context.Context, id string, lan string, fileName string, fileReader io.Reader) (*CreateVideoChapterResponse, error)

	/*
	 * Get Get video chapters
	 * @param id Video ID
	 * @return VideoChapterApiGetRequest
	 */

	Get(id string, r VideoChapterApiGetRequest) (*GetVideoChaptersResponse, error)

	/*
	 * Get Get video chapters
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Video ID
	 * @return VideoChapterApiGetRequest
	 */

	GetWithContext(ctx context.Context, id string, r VideoChapterApiGetRequest) (*GetVideoChaptersResponse, error)

	/*
	 * Delete Delete a video chapter
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoChapterApiDeleteRequest
	 */

	Delete(id string, lan string) (*ResponseSuccess, error)

	/*
	 * Delete Delete a video chapter
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id Video ID
	 * @param lan Language
	 * @return VideoChapterApiDeleteRequest
	 */

	DeleteWithContext(ctx context.Context, id string, lan string) (*ResponseSuccess, error)
}

// VideoChapterService communicating with the VideoChapter
// endpoints of the w3stream API
type VideoChapterService struct {
	client *Client
}

/*
 * Create Create a video chapter
 * Create a VTT file to add chapters to your video. Chapters help break the video into sections.

 * @param id Video ID
 * @param lan Language
 * @return VideoChapterApiCreateRequest
 */

func (s *VideoChapterService) CreateFile(id string, lan string, file *os.File) (*CreateVideoChapterResponse, error) {
	return s.CreateFileWithContext(context.Background(), id, lan, file)
}

/*
 * Create Create a video chapter
 * Create a VTT file to add chapters to your video. Chapters help break the video into sections.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @param lan Language
 * @return VideoChapterApiCreateRequest
 */

func (s *VideoChapterService) CreateFileWithContext(ctx context.Context, id string, lan string, file *os.File) (*CreateVideoChapterResponse, error) {
	return s.CreateWithContext(ctx, id, lan, file.Name(), io.Reader(file))
}

/*
* Create Create a video chapter
* Create a VTT file to add chapters to your video. Chapters help break the video into sections.

* @param id Video ID
* @param lan Language
* @return VideoChapterApiCreateRequest
 */
func (s *VideoChapterService) Create(id string, lan string, fileName string, fileReader io.Reader) (*CreateVideoChapterResponse, error) {
	return s.CreateWithContext(context.Background(), id, lan, fileName, fileReader)
}

/*
 * Create Create a video chapter
 * Create a VTT file to add chapters to your video. Chapters help break the video into sections.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @param lan Language
 * @return VideoChapterApiCreateRequest
 */
func (s *VideoChapterService) CreateWithContext(ctx context.Context, id string, lan string, fileName string, fileReader io.Reader) (*CreateVideoChapterResponse, error) {
	localVarPath := "/videos/{id}/chapter/{lan}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lan"+"}", url.PathEscape(parameterToString(lan, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(CreateVideoChapterResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Get Get video chapters
 * Get a chapter for by video id in a specific language.

 * @param id Video ID
 * @return VideoChapterApiGetRequest
 */

func (s *VideoChapterService) Get(id string, r VideoChapterApiGetRequest) (*GetVideoChaptersResponse, error) {

	return s.GetWithContext(context.Background(), id, r)

}

/*
 * Get Get video chapters
 * Get a chapter for by video id in a specific language.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @return VideoChapterApiGetRequest
 */

func (s *VideoChapterService) GetWithContext(ctx context.Context, id string, r VideoChapterApiGetRequest) (*GetVideoChaptersResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{id}/chapters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(GetVideoChaptersResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Delete Delete a video chapter
 * Delete a chapter in a specific language by providing the video ID for the video you want to delete the chapter from and the language the chapter is in.

 * @param id Video ID
 * @param lan Language
 * @return VideoChapterApiDeleteRequest
 */

func (s *VideoChapterService) Delete(id string, lan string) (*ResponseSuccess, error) {

	return s.DeleteWithContext(context.Background(), id, lan)

}

/*
 * Delete Delete a video chapter
 * Delete a chapter in a specific language by providing the video ID for the video you want to delete the chapter from and the language the chapter is in.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Video ID
 * @param lan Language
 * @return VideoChapterApiDeleteRequest
 */

func (s *VideoChapterService) DeleteWithContext(ctx context.Context, id string, lan string) (*ResponseSuccess, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{id}/chapter/{lan}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lan"+"}", url.PathEscape(parameterToString(lan, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ResponseSuccess)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
