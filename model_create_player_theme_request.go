/*
 * W3STREAM API
 *
 * W3STREAM Service
 *
 * API version: 1.0
 * Contact: support@swagger.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package w3streamsdk

import (
//"encoding/json"
)

// CreatePlayerThemeRequest struct for CreatePlayerThemeRequest
type CreatePlayerThemeRequest struct {
	Controls *Controls `json:"controls,omitempty"`
	Name     *string   `json:"name,omitempty"`
	Theme    *Theme    `json:"theme,omitempty"`
}

// NewCreatePlayerThemeRequest instantiates a new CreatePlayerThemeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePlayerThemeRequest() *CreatePlayerThemeRequest {
	this := CreatePlayerThemeRequest{}
	return &this
}

// NewCreatePlayerThemeRequestWithDefaults instantiates a new CreatePlayerThemeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePlayerThemeRequestWithDefaults() *CreatePlayerThemeRequest {
	this := CreatePlayerThemeRequest{}
	return &this
}

// GetControls returns the Controls field value if set, zero value otherwise.
func (o *CreatePlayerThemeRequest) GetControls() Controls {
	if o == nil || o.Controls == nil {
		var ret Controls
		return ret
	}
	return *o.Controls
}

// GetControlsOk returns a tuple with the Controls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePlayerThemeRequest) GetControlsOk() (*Controls, bool) {
	if o == nil || o.Controls == nil {
		return nil, false
	}
	return o.Controls, true
}

// HasControls returns a boolean if a field has been set.
func (o *CreatePlayerThemeRequest) HasControls() bool {
	if o != nil && o.Controls != nil {
		return true
	}

	return false
}

// SetControls gets a reference to the given Controls and assigns it to the Controls field.
func (o *CreatePlayerThemeRequest) SetControls(v Controls) {
	o.Controls = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreatePlayerThemeRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePlayerThemeRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreatePlayerThemeRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreatePlayerThemeRequest) SetName(v string) {
	o.Name = &v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *CreatePlayerThemeRequest) GetTheme() Theme {
	if o == nil || o.Theme == nil {
		var ret Theme
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePlayerThemeRequest) GetThemeOk() (*Theme, bool) {
	if o == nil || o.Theme == nil {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *CreatePlayerThemeRequest) HasTheme() bool {
	if o != nil && o.Theme != nil {
		return true
	}

	return false
}

// SetTheme gets a reference to the given Theme and assigns it to the Theme field.
func (o *CreatePlayerThemeRequest) SetTheme(v Theme) {
	o.Theme = &v
}

type NullableCreatePlayerThemeRequest struct {
	value *CreatePlayerThemeRequest
	isSet bool
}

func (v NullableCreatePlayerThemeRequest) Get() *CreatePlayerThemeRequest {
	return v.value
}

func (v *NullableCreatePlayerThemeRequest) Set(val *CreatePlayerThemeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePlayerThemeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePlayerThemeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePlayerThemeRequest(val *CreatePlayerThemeRequest) *NullableCreatePlayerThemeRequest {
	return &NullableCreatePlayerThemeRequest{value: val, isSet: true}
}
